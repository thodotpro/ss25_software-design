Warum bekommen Software-Design-Patterns und Prinzipien wenig Beachtung in Youtube Tutorials?

Die meisten Youtube-Tutorials im Bereich Python, richten sich an blutige Anfänger und erklären, überwiegend, Datenstrukturen, einfache Operationen und Funktionen.
Eventuell wird auch noch über Klassen gesprochen. Dennoch findet man auf Youtube auch Tuturials die weitaus tiefer in die Materie reichen.

Hier möchte ich zwei, zufällig gewählte, Beispiele anführen, welche, zusammen immerhin über 9 Millionen Aufrufe haben.

Zum Beispiel der der *Harvard CS50's Introduction to Programming with Python - Full University Course* auf dem Kanal *freeCodeCamp.org*. In diesem Kurs, mit ein Dauer von knapp 16 Stunden,
wird in Stunde 13 bei das Thema Klassenvererbung behandelt. Hier sieht man wie die Klasse *Student* mit einem if-statement initialisiert wird. Hier hätte man sich überlegen können,
ob man die Ausnahme, welche hier für die Initialsierung verwendet wurde, nicht später einbaut und dabei gleichzeitig Design Patterns aufgreift und eine Builder Klasse erstellt.

Ein weiteres Beispiel ist das Video *Python Full Course for free (2024)* auf dem Kanal *Bro Code*. Hier wird in der fünften Stunden eine Slot Machine
programmiert. Dabei wird die Funktionen mit unnötig viel if-else Logik gefüttert und man sich durchaus für jeden if-Fall eine Funktionen hätte programmieren können.


Fazit:

Das Ziel ist, Anfänger schnell zu einem Ergebnis zu bringen und eventuell Begeisterung für das Programmieren zu entfachen, nicht sauberen, wartbaren Code zu lehren.
Begriffe wie OCP (Open-Closed-Principle) oder DIP (Dependency Inversion Principle) klingen für Anfänger abstrakt und können eher abschreckend, als begeistern.

Viele Tutorials zeigen, wie man ein Problem löst, aber nicht, wie man es richtig löst.
Oft wird einfach Code „hingeworfen“, der zwar funktioniert, aber nicht skalierbar oder gut strukturiert ist.

Konzepte wie Factory Pattern, Strategy Pattern oder Dependency Injection sind nicht so leicht verständlich wie eine einfache for-Schleife.
Viele Entwickler lernen Patterns erst, wenn sie in komplexeren Software-Projekten arbeiten.


